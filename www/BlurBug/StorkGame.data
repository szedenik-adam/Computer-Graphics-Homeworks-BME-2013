#version 300 es
//#version 330 core

precision mediump float;

out vec4 FragColor;

in vec2 TexCoord; // From vertex shader.
in float diffLightIntensity;
in float specLightIntensity;
in float fireBugLightIntensity;

// texture samplers
uniform sampler2D texture1;
uniform sampler2D texture2;

struct Material {
    vec3  ambient;
    vec3  diffuse;
	vec3  specular;
};
uniform Material material;

void main()
{
	vec4 ambLightColor = vec4(0.9f, 0.82f, 0.32f, 1.f);
	float ambLightIntensity = 0.1f;

	vec4 color, baseColor;
	if(material.ambient == vec3(0,0,0))
	{
		// linearly interpolate between both textures (80% container, 20% awesomeface)
		// vec4 color = mix(texture(texture1, TexCoord), texture(texture2, TexCoord), 0.2);
		baseColor = texture(texture1, TexCoord);
		// Apply lighting.
		color = vec4((baseColor * diffLightIntensity + baseColor*ambLightColor*ambLightIntensity).rgb, 1.0);
	}
	else
	{
		baseColor = vec4(material.specular, 0.0f);
		vec3 color3 = material.ambient * ambLightColor.rgb * ambLightIntensity;
		color3 += material.diffuse * diffLightIntensity;
		color3 += material.specular * specLightIntensity;
		color = vec4(color3, 1.0);
	}
	//if(material.ambient != vec3(0.05f, 0.05f, 0.05f)) // If the material is not shadow. (if the shadow is not black, try to replace this with <0.05+epsilon & >0.05-epsilon check!)
	{
		color += baseColor * vec4(vec3(0.4f, 0.35f, 0.1f) * fireBugLightIntensity, 0.0f);
	}
	FragColor = color;
}#version 300 es
//#version 330 core

layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aTexCoord;
layout (location = 2) in vec3 aNormal;

out vec2 TexCoord;
out float diffLightIntensity;
out float specLightIntensity;
out float fireBugLightIntensity;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform float material_shininess;
uniform vec3 firebugLightPos;
const float firebugQuadraticAttenuation = 12.2;

// https://www.khronos.org/registry/OpenGL-Refpages/es1.1/xhtml/glMaterial.xml
// https://www.ics.com/blog/fixed-function-modern-opengl-part-4-4

void main()
{
	vec4 modelPosition = (model * vec4(aPos, 1.0f));
	gl_Position = projection * view * modelPosition;
	TexCoord = vec2(aTexCoord.x, aTexCoord.y);

	//vec3 lightPos = vec3(0, 20, 0);
	//vec3 lightDir = normalize(lightPos - gl_Position);

	vec3 lightDirection = normalize(vec3(0, 1, 0.2));
	vec3 modelNormal = normalize(  model*vec4(aNormal, 0.0f)  ).xyz;
    diffLightIntensity = max(0.0, dot(modelNormal, lightDirection));

	vec3 halfVector = normalize(lightDirection + vec3(0,0,1)); // light half vector  (listpOsition -> lightDirection).
	float nDotVP = diffLightIntensity;
	float nDotHV    = max(0.f, dot(modelNormal,  halfVector));      // normal . light half vector
	float pf        = mix(0.f, pow(nDotHV, material_shininess), step(0.f, nDotVP)); // power factor
	specLightIntensity = pf;

	float lightDistance = distance(firebugLightPos, modelPosition.xyz);
	vec3 fireBugLightDir = normalize(firebugLightPos - modelPosition.xyz);
	fireBugLightIntensity = firebugQuadraticAttenuation * max(0.2, dot(modelNormal, fireBugLightDir)) / (lightDistance * lightDistance);
}